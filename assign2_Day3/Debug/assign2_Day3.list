
assign2_Day3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000334  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004bc  080004bc  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004bc  080004bc  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080004bc  080004bc  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004bc  080004bc  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004bc  080004bc  000014bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004c0  080004c0  000014c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080004c4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b8f  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000339  00000000  00000000  00002bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  00002f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000007e  00000000  00000000  00002fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017fbe  00000000  00000000  0000303e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000f81  00000000  00000000  0001affc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b78e  00000000  00000000  0001bf7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a770b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001b0  00000000  00000000  000a7750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a7900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000060  00000000  00000000  000a791f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080004a4 	.word	0x080004a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080004a4 	.word	0x080004a4

080001c8 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80001d0:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <DelayMs+0x44>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80001d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000210 <DelayMs+0x48>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a0e      	ldr	r2, [pc, #56]	@ (8000214 <DelayMs+0x4c>)
 80001dc:	fba2 2303 	umull	r2, r3, r2, r3
 80001e0:	099b      	lsrs	r3, r3, #6
 80001e2:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	68ba      	ldr	r2, [r7, #8]
 80001e8:	fb02 f303 	mul.w	r3, r2, r3
 80001ec:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80001ee:	bf00      	nop
 80001f0:	4b06      	ldr	r3, [pc, #24]	@ (800020c <DelayMs+0x44>)
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	1ad2      	subs	r2, r2, r3
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d3f8      	bcc.n	80001f0 <DelayMs+0x28>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	e0001000 	.word	0xe0001000
 8000210:	20000000 	.word	0x20000000
 8000214:	10624dd3 	.word	0x10624dd3

08000218 <LedInit>:
Date: Sep 19, 2024
*/

#include "led.h"

void LedInit(uint32_t pin) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	// enable GPIOD clock -- RCC AHB1ENR[GPIO_CLKEN] = 1
	RCC->AHB1ENR |= BV(GPIO_LED_CLKEN);
 8000220:	4b2b      	ldr	r3, [pc, #172]	@ (80002d0 <LedInit+0xb8>)
 8000222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000224:	4a2a      	ldr	r2, [pc, #168]	@ (80002d0 <LedInit+0xb8>)
 8000226:	f043 0308 	orr.w	r3, r3, #8
 800022a:	6313      	str	r3, [r2, #48]	@ 0x30
	// config GPIOD.pin as output -- MODER[2*pin+1:2*pin] - 01
	GPIO_LED->MODER &= ~BV(pin*2+1);
 800022c:	4b29      	ldr	r3, [pc, #164]	@ (80002d4 <LedInit+0xbc>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	687a      	ldr	r2, [r7, #4]
 8000232:	0052      	lsls	r2, r2, #1
 8000234:	3201      	adds	r2, #1
 8000236:	2101      	movs	r1, #1
 8000238:	fa01 f202 	lsl.w	r2, r1, r2
 800023c:	43d2      	mvns	r2, r2
 800023e:	4611      	mov	r1, r2
 8000240:	4a24      	ldr	r2, [pc, #144]	@ (80002d4 <LedInit+0xbc>)
 8000242:	400b      	ands	r3, r1
 8000244:	6013      	str	r3, [r2, #0]
	GPIO_LED->MODER |= BV(pin*2);
 8000246:	4b23      	ldr	r3, [pc, #140]	@ (80002d4 <LedInit+0xbc>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	687a      	ldr	r2, [r7, #4]
 800024c:	0052      	lsls	r2, r2, #1
 800024e:	2101      	movs	r1, #1
 8000250:	fa01 f202 	lsl.w	r2, r1, r2
 8000254:	4611      	mov	r1, r2
 8000256:	4a1f      	ldr	r2, [pc, #124]	@ (80002d4 <LedInit+0xbc>)
 8000258:	430b      	orrs	r3, r1
 800025a:	6013      	str	r3, [r2, #0]
	// config GPIOD.pin as pushpull -- OTYPER[pin] - 0
	GPIO_LED->OTYPER |= BV(pin);
 800025c:	4b1d      	ldr	r3, [pc, #116]	@ (80002d4 <LedInit+0xbc>)
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	2101      	movs	r1, #1
 8000262:	687a      	ldr	r2, [r7, #4]
 8000264:	fa01 f202 	lsl.w	r2, r1, r2
 8000268:	4611      	mov	r1, r2
 800026a:	4a1a      	ldr	r2, [pc, #104]	@ (80002d4 <LedInit+0xbc>)
 800026c:	430b      	orrs	r3, r1
 800026e:	6053      	str	r3, [r2, #4]
	// config GPIOD.pin as low-speed -- OSPEEDR[2*pin+1:2*pin] - 00
	GPIO_LED->OSPEEDR &= ~(BV(pin*2+1) | BV(pin*2));
 8000270:	4b18      	ldr	r3, [pc, #96]	@ (80002d4 <LedInit+0xbc>)
 8000272:	689b      	ldr	r3, [r3, #8]
 8000274:	687a      	ldr	r2, [r7, #4]
 8000276:	0052      	lsls	r2, r2, #1
 8000278:	3201      	adds	r2, #1
 800027a:	2101      	movs	r1, #1
 800027c:	4091      	lsls	r1, r2
 800027e:	687a      	ldr	r2, [r7, #4]
 8000280:	0052      	lsls	r2, r2, #1
 8000282:	2001      	movs	r0, #1
 8000284:	fa00 f202 	lsl.w	r2, r0, r2
 8000288:	430a      	orrs	r2, r1
 800028a:	43d2      	mvns	r2, r2
 800028c:	4611      	mov	r1, r2
 800028e:	4a11      	ldr	r2, [pc, #68]	@ (80002d4 <LedInit+0xbc>)
 8000290:	400b      	ands	r3, r1
 8000292:	6093      	str	r3, [r2, #8]
	// config GPIOD.pin with no pullup & pulldown resistor PUPDR[2*pin+1:2*pin] -- 00
	GPIO_LED->PUPDR &= ~(BV(pin*2+1));
 8000294:	4b0f      	ldr	r3, [pc, #60]	@ (80002d4 <LedInit+0xbc>)
 8000296:	68db      	ldr	r3, [r3, #12]
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	0052      	lsls	r2, r2, #1
 800029c:	3201      	adds	r2, #1
 800029e:	2101      	movs	r1, #1
 80002a0:	fa01 f202 	lsl.w	r2, r1, r2
 80002a4:	43d2      	mvns	r2, r2
 80002a6:	4611      	mov	r1, r2
 80002a8:	4a0a      	ldr	r2, [pc, #40]	@ (80002d4 <LedInit+0xbc>)
 80002aa:	400b      	ands	r3, r1
 80002ac:	60d3      	str	r3, [r2, #12]

	GPIO_LED->PUPDR |= (BV(pin*2));
 80002ae:	4b09      	ldr	r3, [pc, #36]	@ (80002d4 <LedInit+0xbc>)
 80002b0:	68db      	ldr	r3, [r3, #12]
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	0052      	lsls	r2, r2, #1
 80002b6:	2101      	movs	r1, #1
 80002b8:	fa01 f202 	lsl.w	r2, r1, r2
 80002bc:	4611      	mov	r1, r2
 80002be:	4a05      	ldr	r2, [pc, #20]	@ (80002d4 <LedInit+0xbc>)
 80002c0:	430b      	orrs	r3, r1
 80002c2:	60d3      	str	r3, [r2, #12]

}
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40020c00 	.word	0x40020c00

080002d8 <LedOn>:

void LedOn(uint32_t pin) {
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	// GPIOD.pin -- ODR[pin] = 1
	GPIO_LED->ODR |= BV(pin);
 80002e0:	4b07      	ldr	r3, [pc, #28]	@ (8000300 <LedOn+0x28>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	2101      	movs	r1, #1
 80002e6:	687a      	ldr	r2, [r7, #4]
 80002e8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ec:	4611      	mov	r1, r2
 80002ee:	4a04      	ldr	r2, [pc, #16]	@ (8000300 <LedOn+0x28>)
 80002f0:	430b      	orrs	r3, r1
 80002f2:	6153      	str	r3, [r2, #20]
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	40020c00 	.word	0x40020c00

08000304 <LedOff>:

void LedOff(uint32_t pin) {
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	// GPIOD.pin -- ODR[pin] = 0
	GPIO_LED->ODR &= ~BV(pin);
 800030c:	4b08      	ldr	r3, [pc, #32]	@ (8000330 <LedOff+0x2c>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	2101      	movs	r1, #1
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	fa01 f202 	lsl.w	r2, r1, r2
 8000318:	43d2      	mvns	r2, r2
 800031a:	4611      	mov	r1, r2
 800031c:	4a04      	ldr	r2, [pc, #16]	@ (8000330 <LedOff+0x2c>)
 800031e:	400b      	ands	r3, r1
 8000320:	6153      	str	r3, [r2, #20]
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40020c00 	.word	0x40020c00

08000334 <LedBlink>:

void LedBlink(uint32_t pin, uint32_t delayMs) {
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	6039      	str	r1, [r7, #0]
	LedOn(pin);
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f7ff ffca 	bl	80002d8 <LedOn>
	DelayMs(delayMs);
 8000344:	6838      	ldr	r0, [r7, #0]
 8000346:	f7ff ff3f 	bl	80001c8 <DelayMs>
	LedOff(pin);
 800034a:	6878      	ldr	r0, [r7, #4]
 800034c:	f7ff ffda 	bl	8000304 <LedOff>
}
 8000350:	bf00      	nop
 8000352:	3708      	adds	r7, #8
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <main>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void) {
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	SystemInit();
 800035c:	f000 f81e 	bl	800039c <SystemInit>
	LedInit(LED_GREEN_PIN);
 8000360:	200c      	movs	r0, #12
 8000362:	f7ff ff59 	bl	8000218 <LedInit>
	LedInit(LED_ORANGE_PIN);
 8000366:	200d      	movs	r0, #13
 8000368:	f7ff ff56 	bl	8000218 <LedInit>
	LedInit(LED_RED_PIN);
 800036c:	200e      	movs	r0, #14
 800036e:	f7ff ff53 	bl	8000218 <LedInit>
	LedInit(LED_BLUE_PIN);
 8000372:	200f      	movs	r0, #15
 8000374:	f7ff ff50 	bl	8000218 <LedInit>
	while(1) {
		LedBlink(LED_GREEN_PIN, 100);
 8000378:	2164      	movs	r1, #100	@ 0x64
 800037a:	200c      	movs	r0, #12
 800037c:	f7ff ffda 	bl	8000334 <LedBlink>
		LedBlink(LED_ORANGE_PIN, 100);
 8000380:	2164      	movs	r1, #100	@ 0x64
 8000382:	200d      	movs	r0, #13
 8000384:	f7ff ffd6 	bl	8000334 <LedBlink>
		LedBlink(LED_RED_PIN, 100);
 8000388:	2164      	movs	r1, #100	@ 0x64
 800038a:	200e      	movs	r0, #14
 800038c:	f7ff ffd2 	bl	8000334 <LedBlink>
		LedBlink(LED_BLUE_PIN, 100);
 8000390:	2164      	movs	r1, #100	@ 0x64
 8000392:	200f      	movs	r0, #15
 8000394:	f7ff ffce 	bl	8000334 <LedBlink>
		LedBlink(LED_GREEN_PIN, 100);
 8000398:	bf00      	nop
 800039a:	e7ed      	b.n	8000378 <main+0x20>

0800039c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  DWT_Init();
 80003a0:	f000 f802 	bl	80003a8 <DWT_Init>
}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80003ac:	4b14      	ldr	r3, [pc, #80]	@ (8000400 <DWT_Init+0x58>)
 80003ae:	68db      	ldr	r3, [r3, #12]
 80003b0:	4a13      	ldr	r2, [pc, #76]	@ (8000400 <DWT_Init+0x58>)
 80003b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80003b6:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80003b8:	4b11      	ldr	r3, [pc, #68]	@ (8000400 <DWT_Init+0x58>)
 80003ba:	68db      	ldr	r3, [r3, #12]
 80003bc:	4a10      	ldr	r2, [pc, #64]	@ (8000400 <DWT_Init+0x58>)
 80003be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80003c2:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80003c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000404 <DWT_Init+0x5c>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a0e      	ldr	r2, [pc, #56]	@ (8000404 <DWT_Init+0x5c>)
 80003ca:	f023 0301 	bic.w	r3, r3, #1
 80003ce:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80003d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000404 <DWT_Init+0x5c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000404 <DWT_Init+0x5c>)
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80003dc:	4b09      	ldr	r3, [pc, #36]	@ (8000404 <DWT_Init+0x5c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80003e2:	bf00      	nop
    __ASM volatile ("NOP");
 80003e4:	bf00      	nop
    __ASM volatile ("NOP");
 80003e6:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80003e8:	4b06      	ldr	r3, [pc, #24]	@ (8000404 <DWT_Init+0x5c>)
 80003ea:	685b      	ldr	r3, [r3, #4]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	bf0c      	ite	eq
 80003f0:	2301      	moveq	r3, #1
 80003f2:	2300      	movne	r3, #0
 80003f4:	b2db      	uxtb	r3, r3
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr
 8000400:	e000edf0 	.word	0xe000edf0
 8000404:	e0001000 	.word	0xe0001000

08000408 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000408:	480d      	ldr	r0, [pc, #52]	@ (8000440 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800040a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800040c:	f7ff ffc6 	bl	800039c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000410:	480c      	ldr	r0, [pc, #48]	@ (8000444 <LoopForever+0x6>)
  ldr r1, =_edata
 8000412:	490d      	ldr	r1, [pc, #52]	@ (8000448 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000414:	4a0d      	ldr	r2, [pc, #52]	@ (800044c <LoopForever+0xe>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000418:	e002      	b.n	8000420 <LoopCopyDataInit>

0800041a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800041a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800041c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041e:	3304      	adds	r3, #4

08000420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000424:	d3f9      	bcc.n	800041a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000426:	4a0a      	ldr	r2, [pc, #40]	@ (8000450 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000428:	4c0a      	ldr	r4, [pc, #40]	@ (8000454 <LoopForever+0x16>)
  movs r3, #0
 800042a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800042c:	e001      	b.n	8000432 <LoopFillZerobss>

0800042e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000430:	3204      	adds	r2, #4

08000432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000434:	d3fb      	bcc.n	800042e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000436:	f000 f811 	bl	800045c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800043a:	f7ff ff8d 	bl	8000358 <main>

0800043e <LoopForever>:

LoopForever:
  b LoopForever
 800043e:	e7fe      	b.n	800043e <LoopForever>
  ldr   r0, =_estack
 8000440:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000448:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800044c:	080004c4 	.word	0x080004c4
  ldr r2, =_sbss
 8000450:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000454:	20000020 	.word	0x20000020

08000458 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000458:	e7fe      	b.n	8000458 <ADC_IRQHandler>
	...

0800045c <__libc_init_array>:
 800045c:	b570      	push	{r4, r5, r6, lr}
 800045e:	4d0d      	ldr	r5, [pc, #52]	@ (8000494 <__libc_init_array+0x38>)
 8000460:	4c0d      	ldr	r4, [pc, #52]	@ (8000498 <__libc_init_array+0x3c>)
 8000462:	1b64      	subs	r4, r4, r5
 8000464:	10a4      	asrs	r4, r4, #2
 8000466:	2600      	movs	r6, #0
 8000468:	42a6      	cmp	r6, r4
 800046a:	d109      	bne.n	8000480 <__libc_init_array+0x24>
 800046c:	4d0b      	ldr	r5, [pc, #44]	@ (800049c <__libc_init_array+0x40>)
 800046e:	4c0c      	ldr	r4, [pc, #48]	@ (80004a0 <__libc_init_array+0x44>)
 8000470:	f000 f818 	bl	80004a4 <_init>
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	10a4      	asrs	r4, r4, #2
 8000478:	2600      	movs	r6, #0
 800047a:	42a6      	cmp	r6, r4
 800047c:	d105      	bne.n	800048a <__libc_init_array+0x2e>
 800047e:	bd70      	pop	{r4, r5, r6, pc}
 8000480:	f855 3b04 	ldr.w	r3, [r5], #4
 8000484:	4798      	blx	r3
 8000486:	3601      	adds	r6, #1
 8000488:	e7ee      	b.n	8000468 <__libc_init_array+0xc>
 800048a:	f855 3b04 	ldr.w	r3, [r5], #4
 800048e:	4798      	blx	r3
 8000490:	3601      	adds	r6, #1
 8000492:	e7f2      	b.n	800047a <__libc_init_array+0x1e>
 8000494:	080004bc 	.word	0x080004bc
 8000498:	080004bc 	.word	0x080004bc
 800049c:	080004bc 	.word	0x080004bc
 80004a0:	080004c0 	.word	0x080004c0

080004a4 <_init>:
 80004a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a6:	bf00      	nop
 80004a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004aa:	bc08      	pop	{r3}
 80004ac:	469e      	mov	lr, r3
 80004ae:	4770      	bx	lr

080004b0 <_fini>:
 80004b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b2:	bf00      	nop
 80004b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b6:	bc08      	pop	{r3}
 80004b8:	469e      	mov	lr, r3
 80004ba:	4770      	bx	lr
